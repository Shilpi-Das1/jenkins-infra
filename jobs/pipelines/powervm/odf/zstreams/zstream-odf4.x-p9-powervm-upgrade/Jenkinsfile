@Library('jenkins-upstream-library') _

pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:3256.v88a_f6e922152-2-jdk17.1'
            args '-v /etc/resolv.conf:/etc/resolv.conf.tmp '
            label 'jump-vpc-x86_64'
        }
    }
    parameters {
        string(defaultValue: '', description: 'OCP version on which OCS/ODF will be deployed', name: 'ocpVersion')
        string(defaultValue: '', description: 'OCS version which you want to upgrade', name: 'ocsVersion')
        string(defaultValue: '', description: 'rhceph-dev/ocs-registry Image used for deploying OCS/ODF', name: 'ocsRegistryImage')
        string(defaultValue: '', description: 'OCS version in which you want to upgrade', name: 'ocsUpgradeVersion')
        string(defaultValue: '', description: 'rhceph-dev/ocs-registry image of upgraded ocs version', name: 'ocsUpgradeRegistryImage')
        booleanParam(defaultValue: false, description: 'Enable/Disable Vault', name: 'Vault')
        booleanParam(defaultValue: false, description: 'Enable/Disable Fips', name: 'Fips')
        string(defaultValue: '720', description: 'Enter time(in Minutes) to retain the cluster', name: 'KeepFor')
    }
     environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        OS_USERNAME = credentials('OS_USERNAME')
        OS_PASSWORD = credentials('OS_PASSWORD')
        DOCKER_USER = credentials('DOCKER_USER')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('ODF_PULL_SECRET')


        // Parameters
        OCP_RELEASE = "${params.ocpVersion}"
        OCS_VERSION = "${params.ocsVersion}"
        UPGRADE_OCS_VERSION = "${params.ocsUpgradeVersion}"
        OCS_REGISTRY_IMAGE = "${params.ocsRegistryImage}"
        UPGRADE_OCS_REGISTRY = "${params.ocsUpgradeRegistryImage}"
        ENABLE_VAULT = "${params.Vault}"
        ENABLE_FIPS = "${params.Fips}"
        TIMEOUT = "${params.KeepFor}"

        //Env constants
        HARDWARE_CHOSE = "P9"
        TERRAFORM_VER = "1.9.6"
        POWERVS = false
        SCRIPT_DEPLOYMENT = false
        WAIT_FOR_DEBUG = "1"

        //Branch
        OPENSHIFT_POWERVC_GIT_TF_DEPLOY_BRANCH="main"//The download branch

        TARGET = "deploy-openshift4-powervc"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"

        // ODF Variables
        PLATFORM = "powervm"
        CONFIG_TYPE = "odf"
        TIER_TEST_RUN = "1"

        // kdump Configuration
        KDUMP_ENABLE="false"



	 }
    stages {
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                setupClusterConfig("${CONFIG_TYPE}")
                script {
                    env.TIER_TEST = env.TIER_TEST_RUN
                    env.ODF_VERSION = env.OCS_VERSION
                }
            }
        }
        stage('Setting RHEL Image as per OCP version') {
            steps {
                script {
		    env.RERUN_TIER_TEST = "1"
                    switch (env.OCP_RELEASE) {
                        case "4.14":
                            env.REDHAT_RELEASE = "9.5"
                            break
                        case "4.15":
                            env.REDHAT_RELEASE = "9.5"
                            break
                        case "4.16":
                            env.REDHAT_RELEASE = "9.5"
                            break
                        case "4.17":
                            env.REDHAT_RELEASE = "9.5"
                            break
                        case "4.18":
                            env.REDHAT_RELEASE = "9.5"
                            break
                        case "4.19":
                            env.REDHAT_RELEASE = "9.5"
                            break
                        case "4.20":
                            env.REDHAT_RELEASE = "9.6"
                            break
                        default:
                            env.REDHAT_RELEASE = "9.5"
                    }
                }
            }
        }

        stage('pull artifact') {
            steps {
                getArtifacts("mirror-openshift-release", "latest-${OCP_RELEASE}-stable-build.txt" )
                getArtifacts("powervm/poll-powervc-images", "cicd-rhcos-${OCP_RELEASE}.latest.txt")
                getArtifacts("powervm/poll-powervc-images", "cicd-rhel-${REDHAT_RELEASE}.latest.txt")
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        pullSecret()
                        gbToMb()
                        env.OPENSHIFT_IMAGE = ""
                        env.OCP_RELEASE_TAG = ""
                        if (fileExists("deploy/artifactory/latest-${OCP_RELEASE}-stable-build.txt")) {
                            env.OPENSHIFT_IMAGE = readFile "deploy/artifactory/latest-${OCP_RELEASE}-stable-build.txt"
                            env.OPENSHIFT_IMAGE = env.OPENSHIFT_IMAGE.trim()
                            env.OCP_RELEASE_TAG = env.OPENSHIFT_IMAGE.split(":")[1].trim()
                        }
                        else {
                            echo "latest-${OCP_RELEASE}-build.txt file does not exist. Please check mirror-openshift-release job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/cicd-rhcos-${OCP_RELEASE}.latest.txt")) {
                            env.RHCOS_IMAGE = readFile "deploy/artifactory/cicd-rhcos-${OCP_RELEASE}.latest.txt"
                            env.RHCOS_IMAGE_NAME = env.RHCOS_IMAGE.split()[0].trim()
                            env.RHCOS_IMAGE_ID = env.RHCOS_IMAGE.split()[1].trim()
                        }
                        else {
                            echo "cicd-rhel-${REDHAT_RELEASE}.latest.txt file does not exist. Please check poll-powervc-images job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/cicd-rhel-${REDHAT_RELEASE}.latest.txt")) {
                            env.BASTION_IMAGE = readFile "deploy/artifactory/cicd-rhel-${REDHAT_RELEASE}.latest.txt"
                            env.BASTION_IMAGE_NAME = env.BASTION_IMAGE.split()[0].trim()
                            env.BASTION_IMAGE_ID = env.BASTION_IMAGE.split()[1].trim()
                        }
                        else {
                            echo "cicd-rhel-${REDHAT_RELEASE}.latest.txt file does not exist. Please check poll-powervc-images job"
                            throw err
                        }
                        currentBuild.description = "Upgrade ODF: ${env.ODF_VERSION} to ${env.UPGRADE_OCS_VERSION}"
                        createTemplate(env.OS_AUTH_URL, env.MASTER_VCPUS , "${MASTER_MEMORY_MB}", env.MASTER_PROCESSORS, env.MASTER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.WORKER_VCPUS , "${WORKER_MEMORY_MB}", env.WORKER_PROCESSORS, env.WORKER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BASTION_VCPUS , "${BASTION_MEMORY_MB}", env.BASTION_PROCESSORS, env.BASTION_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BOOTSTRAP_VCPUS , "${BOOTSTRAP_MEMORY_MB}", env.BOOTSTRAP_PROCESSORS, env.BOOTSTRAP_TEMPLATE)
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                initializeEnvironment()
            }
        }
        stage('Setup Terraform Plugin') {
            steps {
                setupTerraformPlugin()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }
        stage('Run ODF Setup script') {
            steps {
                odfAuthYaml()
                script {
                    try {
                        sh '''
                            cd ${WORKSPACE}/scripts/odf
                            chmod +x odf-rescan-scsi.sh
                            ./odf-rescan-scsi.sh
                        '''
                    }
                    catch (err) {
                        echo 'Error ! ODF deploy script failed!'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
                odfRunSetupScript()
            }
        }
        stage('Run ODF deploy script') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                            cd ${WORKSPACE}/scripts/odf
                            chmod +x run-odf-deploy.sh
                            ./run-odf-deploy.sh
                        '''
                    }
                    catch (err) {
                        echo 'Error ! ODF deploy script failed!'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Capture output of multiple commands to verify before ODF upgrade') {
            steps {
                odfRunCommands("Before Upgrade")
            }
        }
        stage('Run setup script again after odf deployment') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    if ( ! params.ocsUpgradeVersion.isEmpty()) {
                        try {
                            sh '''
                               cd ${WORKSPACE}/scripts/odf
                               chmod +x odf-setup-for-upgrade.sh
                               ./odf-setup-for-upgrade.sh
                               '''
                        }
                        catch (err) {
                            echo 'Error ! Running setup script, odf-setup-for-upgrade.sh, post ODF deployment failed!'
                            env.FAILED_STAGE=env.STAGE_NAME
                            throw err
                        }
                    }
                }
            }
        }
        stage('Upgrading ODF') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    if ( ! params.ocsUpgradeVersion.isEmpty()) {
                        try {
                            sh '''
                               cd ${WORKSPACE}/scripts/odf
                               chmod +x run-odf-upgrade.sh
                               ./run-odf-upgrade.sh
                               '''
                            env.ODF_FULL_BUILD = readFile "${WORKSPACE}/odf-full-build.txt"

                        }
                        catch (err) {
                            echo 'Error ! ODF Upgrade using upgrade-ocs-ci.sh failed!'
                            env.FAILED_STAGE=env.STAGE_NAME
                            throw err
                        }
                    }
                }
            }
        }
        stage('Capture output of multiple commands to verify after ODF upgrade') {
            steps {
               odfRunCommands("After Upgrade and before Tier ${TIER_TEST}")
            }
        }
        stage('Run tier1 test') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                            cd ${WORKSPACE}/scripts/odf
                            chmod +x run-tier-tests.sh
                            chmod +x fix-config.sh
                            chmod +x buffer_io_disabled.sh
                            ./buffer_io_disabled.sh
                            [ ! -z "$UPGRADE_OCS_VERSION" ] && ./fix-config.sh ;
                            ./run-tier-tests.sh
                        '''
                    }
                    catch (err) {
                        echo 'Error ! Tier test script failed!'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                 }
             }
        }
        stage('Capture cluster information after running tier1') {
            steps {    
                odfRunCommands("After Tier ${TIER_TEST}")
            }
        }
        stage('Check Ceph health and run tier4a') {
            steps {
                script {
                    sh 'chmod +x ./scripts/odf/check_ceph_health.sh'
                    def result = sh(script: './scripts/odf/check_ceph_health.sh', returnStatus: true)
                    if (result != 0) {
                        echo "Ceph health check failed. Not running tier-4a"
                    } else {
                        echo "Ceph is healthy. Running tier 4a"
                        env.TIER_TEST = "4a"
                        sh '''
                          sed -i "s|^export TIER_TEST=.*$|export TIER_TEST=4a|" ${WORKSPACE}/env_vars.sh
                          . ${WORKSPACE}/env_vars.sh
                          ./scripts/odf/run-tier-tests.sh
                        '''
                        env.ODF_VERSION = env.UPGRADE_OCS_VERSION
                    }
                }
            }
        }
        stage('Capture cluster information after running tier-4a') {
            steps {    
                odfRunCommands("After Tier ${TIER_TEST}")
            }
        }
        stage('Waiting to timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                            TIMEOUT_MIN = TIMEOUT.toInteger()
                            if ( TIMEOUT_MIN != 0 )
                            {
                                TIMEOUT_SEC=TIMEOUT_MIN*60
                                echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                                sleep TIMEOUT_SEC
                            }
                        }
                    catch (err) {
                            echo 'Error ! Timeout stage failed!'
                            env.FAILED_STAGE=env.STAGE_NAME
                            throw err
                    }
                }
            }
        }
    }
    post {
        always {
            archiveAllArtifacts("results.tar.gz", "tier1-summary.txt", "tier4a-summary.txt", "check_crc.txt" , "odf-must-gather.tar.gz", "odf-commands.txt", "odfbuild", "deploy/vars.tfvars")
            cleanupOcp4Cluster()
            checkInfraError()
            odfProcessTierTestResults()
            cleanWs()
        }
    }
}


