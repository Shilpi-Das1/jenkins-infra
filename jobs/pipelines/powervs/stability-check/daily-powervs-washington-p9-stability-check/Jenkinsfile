@Library('jenkins-upstream-library') _

pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-agent'
        }
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        IBMCLOUD_API_KEY = credentials('IBMCLOUD_UPSTREAM_CI_API_KEY')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('PULL_SECRET')

        //Env constants
        TERRAFORM_VER = "1.2.0"
        IBM_CLOUD_REGION = "us-east"
        IBM_CLOUD_ZONE = "us-east"
        SERVICE_INSTANCE_ID = "8aec6256-b197-4fe5-afcf-7507be7aa77b"

        BASTION_MEMORY = "8"
        BASTION_PROCESSORS = ".5"

        BASTION_IMAGE = "rhel-9"
        VM_ID_PREFIX = "rdr-cicd-stability"
        SYSTEM_TYPE = "s922"
        NETWORK_NAME = "ocp-net"
        RHEL_USERNAME = "root"
        RHEL_SMT = "4"
        BASTION_HEALTH_STATUS = "WARNING"
        BASTION_IMAGE_FILE = "latest-${BASTION_IMAGE}-ocp-cicd-washington.txt"

        //Makefile variables
        OPENSHIFT_POWERVS_SINGLE_INSTANCE_GIT_TF_DEPLOY_BRANCH="master" //The download branch

        TARGET = "deploy-openshift4-powervs-single-instance"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"

        BUCKET_NAME="ocp4-images-bucket"
        PVSADM_VERSION="v0.1.22"
        SECRET_KEY_POWERVS = credentials('SECRET_KEY_POWERVS')
        ACCESS_KEY_POWERVS = credentials('ACCESS_KEY_POWERVS')
        POWERVS = true
        SCRIPT_DEPLOYMENT = false
        WAIT_FOR_DEBUG = "0"
        BASTION_IMPORT_IMAGE_NAME="rhel-ci-9"
	 }

    stages {
        stage('Pull PowerVS Image'){
            steps{
                getArtifacts("powervs/poll-powervs-images", "${BASTION_IMAGE_FILE}" )
            }
        }

        stage('Import Bastion Image') {
            steps {
                script {
                    sh(returnStatus: false, returnStdout: false, script: "curl -sL https://raw.githubusercontent.com/ppc64le-cloud/pvsadm/master/get.sh | VERSION=${PVSADM_VERSION} FORCE=1 bash")
                    script{
                        if (fileExists("deploy/artifactory/${BASTION_IMAGE_FILE}")) {
                            env.BASTION_IMAGE_NAME = readFile "deploy/artifactory/${BASTION_IMAGE_FILE}"
                            env.BASTION_UPLOAD_IMAGE = env.BASTION_IMAGE_NAME.replace("-tier1","").trim()
                            env.BASTION_IMAGE_NAME=sh(returnStdout:true, script: '''echo "${BASTION_IMPORT_IMAGE_NAME}-$(date +%m%d%Y%H%M)" ''').trim()
                        }
                        else{
                            echo "${BASTION_IMAGE_FILE} file does not exist. Please check poll-powervs-job"
                            throw err
                        }
                    }
                    importImage()
                }
            }
        }

        stage('Initialize Environment') {
            steps {
                initializeEnvironment()
                setupTerraformPlugin()
            }
        }
        stage('Deploy VM') {
            steps {
                deployCluster()
            }
        }

        stage('Stability Check') {
            steps {
                checkStability()
             }
        }
    }

    post {
        always {
            script {
                archiveAllArtifacts("deploy/vars.tfvars", "deploy/stability-check.log")
                cleanupOcp4Cluster()
                message = "VM Image:`${env.BASTION_IMAGE_NAME}`, System Type: `${env.SYSTEM_TYPE}`, Private Network: `${env.NETWORK_NAME}` "
                cleanupPowerVSResources()
                cleanupImage()
                notifyBySlack(currentBuild.result, message)
                cleanWs()
            }
        }
    }
}

def importImage() {
  sh'''
      region="us-south"
      pvsadm image import -b "${BUCKET_NAME}" -r "$region" -i "${SERVICE_INSTANCE_ID}" -o "${BASTION_UPLOAD_IMAGE}.ova.gz" --pvs-image-name "${BASTION_IMAGE_NAME}" --pvs-storagetype tier1 --accesskey "${ACCESS_KEY_POWERVS}" --secretkey "${SECRET_KEY_POWERVS}" -w
      #Adding sleep as sometimes the image is not picked by terraform
      sleep 300
  '''
}

def cleanupImage() {
    sh(returnStatus: false, returnStdout: false, script: "pvsadm purge images -i ${SERVICE_INSTANCE_ID} --regexp ${BASTION_IMAGE_NAME} --no-prompt")
}
