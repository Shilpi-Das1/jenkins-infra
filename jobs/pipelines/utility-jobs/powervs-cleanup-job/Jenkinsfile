@Library('jenkins-upstream-library') _

def INSTANCE_NAME_LIST = [
                    "rdr-ocp-cicd-montreal01",
                    "rdr-ocp-cicd-toronto01"
                    ]

pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-agent'
        }
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        IBMCLOUD_APIKEY = credentials('IBMCLOUD_UPSTREAM_CI_API_KEY')
        CRN = "crn:v1:bluemix:public:power-iaas:mon01:a/7cfbd5381a434af7a09289e795840d4e:7545067f-dc8c-40d3-be18-13f433d19b62::"
        PVSADM_VERSION = "v0.1.22"
	}

	stages {
        stage('Cleanup PowerVS Resources') {
            steps {

                script {
                    sh(returnStatus: false, returnStdout: false, script: "curl -sL https://raw.githubusercontent.com/ppc64le-cloud/pvsadm/${PVSADM_VERSION}/get.sh | VERSION=${PVSADM_VERSION} FORCE=1 bash; pvsadm version")
                    sh '''
                        echo "IBM cloud login"
                        ibmcloud login -a cloud.ibm.com -r us-south -g ibm-internal-cicd-resource-group -q --apikey=${IBMCLOUD_APIKEY}
                        ibmcloud pi workspace target ${CRN}
                        chmod +x ./scripts/cleanup-powervs-resources.sh
                    '''
                    INSTANCE_NAME_LIST.each { item ->
                    sh(returnStatus: false, returnStdout: false, script: "./scripts/cleanup-powervs-resources.sh -s '${item}' -u 'rdr-cicd' 2>&1 | tee -a cleanup.log")
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: "cleanup.log", fingerprint: true, onlyIfSuccessful: false
            cleanWs()
        }
    }
}
